#!/usr/bin/env python3

import sys
import os
import argparse
import re
import textwrap
import pathlib
import codecs

def read_from_file(path):
  with codecs.open(path, 'r', 'utf-8') as f:
    return f.read()

def escape_path(word):
  return word.replace('$ ', '$$ ').replace(' ', '$ ').replace(':', '$:')

class Writer(object):
  def __init__(self, output, width=78):
    self.output = output
    self.width = width

  def newline(self):
    self.output.write('\n')

  def comment(self, text, has_path=False):
    for line in textwrap.wrap(text, self.width - 2, break_long_words=False,
                  break_on_hyphens=False):
      self.output.write('# ' + line + '\n')

  def variable(self, key, value, indent=0):
    if value is None:
      return
    if isinstance(value, list):
      value = ' '.join(filter(None, value))  # Filter out empty strings.
    self._line('%s = %s' % (key, value), indent)

  def pool(self, name, depth):
    self._line('pool %s' % name)
    self.variable('depth', depth, indent=1)

  def rule(self, name, command, description=None, depfile=None,
       generator=False, pool=None, restat=False, rspfile=None,
       rspfile_content=None, deps=None):
    self._line('rule %s' % name)
    self.variable('command', command, indent=1)
    if description:
      self.variable('description', description, indent=1)
    if depfile:
      self.variable('depfile', depfile, indent=1)
    if generator:
      self.variable('generator', '1', indent=1)
    if pool:
      self.variable('pool', pool, indent=1)
    if restat:
      self.variable('restat', '1', indent=1)
    if rspfile:
      self.variable('rspfile', rspfile, indent=1)
    if rspfile_content:
      self.variable('rspfile_content', rspfile_content, indent=1)
    if deps:
      self.variable('deps', deps, indent=1)

  def build(self, outputs, rule, inputs=None, implicit=None, order_only=None,
        variables=None, implicit_outputs=None, pool=None):
    outputs = as_list(outputs)
    out_outputs = [escape_path(x) for x in outputs]
    all_inputs = [escape_path(x) for x in as_list(inputs)]

    if implicit:
      implicit = [escape_path(x) for x in as_list(implicit)]
      all_inputs.append('|')
      all_inputs.extend(implicit)
    if order_only:
      order_only = [escape_path(x) for x in as_list(order_only)]
      all_inputs.append('||')
      all_inputs.extend(order_only)
    if implicit_outputs:
      implicit_outputs = [escape_path(x)
                for x in as_list(implicit_outputs)]
      out_outputs.append('|')
      out_outputs.extend(implicit_outputs)

    self._line('build %s: %s' % (' '.join(out_outputs),
                   ' '.join([rule] + all_inputs)))
    if pool is not None:
      self._line('  pool = %s' % pool)

    if variables:
      if isinstance(variables, dict):
        iterator = iter(variables.items())
      else:
        iterator = iter(variables)

      for key, val in iterator:
        self.variable(key, val, indent=1)

    return outputs

  def include(self, path):
    self._line('include %s' % path)

  def subninja(self, path):
    self._line('subninja %s' % path)

  def default(self, paths):
    self._line('default %s' % ' '.join(as_list(paths)))

  def _count_dollars_before_index(self, s, i):
    """Returns the number of '$' characters right in front of s[i]."""
    dollar_count = 0
    dollar_index = i - 1
    while dollar_index > 0 and s[dollar_index] == '$':
      dollar_count += 1
      dollar_index -= 1
    return dollar_count

  def _line(self, text, indent=0):
    """Write 'text' word-wrapped at self.width characters."""
    leading_space = '  ' * indent
    while len(leading_space) + len(text) > self.width:
      # The text is too wide; wrap if possible.

      # Find the rightmost space that would obey our width constraint and
      # that's not an escaped space.
      available_space = self.width - len(leading_space) - len(' $')
      space = available_space
      while True:
        space = text.rfind(' ', 0, space)
        if (space < 0 or
          self._count_dollars_before_index(text, space) % 2 == 0):
          break

      if space < 0:
        # No such space; just use the first unescaped space we can find.
        space = available_space - 1
        while True:
          space = text.find(' ', space + 1)
          if (space < 0 or
            self._count_dollars_before_index(text, space) % 2 == 0):
            break
      if space < 0:
        # Give up on breaking.
        break

      self.output.write(leading_space + text[0:space] + ' $\n')
      text = text[space+1:]

      # Subsequent lines are continuations, so indent them.
      leading_space = '  ' * (indent+2)

    self.output.write(leading_space + text + '\n')

  def close(self):
    self.output.close()


def as_list(input):
  if input is None:
    return []
  if isinstance(input, list):
    return input
  return [input]


def escape(string):
  """Escape a string such that it can be embedded into a Ninja file without
  further interpretation."""
  assert '\n' not in string, 'Ninja syntax does not allow newlines'
  # We only have one special metacharacter: '$'.
  return string.replace('$', '$$')


def expand(string, vars, local_vars=None):
  """Expand a string containing $vars as Ninja would.

  Note: doesn't handle the full Ninja variable syntax, but it's enough
  to make configure.py's use of it work.
  """
  if local_vars is None:
    local_vars = {}
  def exp(m):
    var = m.group(1)
    if var == '$':
      return '$'
    return local_vars.get(var, vars.get(var, ''))
  return re.sub(r'\$(\$|\w*)', exp, string)

def main():
  parser = argparse.ArgumentParser(prog='gen')
  parser.add_argument('OUT', help='output directory')
  parser.add_argument('-C', help='output directory')
  args = parser.parse_args()

  out_path = args.OUT
  build_path = os.path.join(out_path, 'build.ninja')
  abs_out_path = os.path.abspath(out_path)
  abs_src_path = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
  if abs_out_path.startswith(abs_src_path):
    src_path = os.path.relpath(abs_src_path, abs_out_path)
  else:
    src_path = abs_src_path

  pathlib.Path(out_path).mkdir(parents=True, exist_ok=True)
  
  regenerate_args = ' '.join(sys.argv[1:])

  with open(build_path, 'w') as f:
    n = Writer(f)
    rules(n, src_path, abs_src_path)

def rules(n, src_path, abs_src_path):
  n.variable('SRC', src_path)
  n.variable('OUT', '.')
  n.newline()
  n.rule('gen', '$in .', description='GEN', generator=True)
  n.newline()
  n.build('$OUT/build.ninja', 'gen', '$SRC/tools/gen', implicit=[])

  n.newline()
  n.variable('ABS_SRC', os.path.abspath(os.path.dirname(os.path.dirname(__file__))))
  n.variable('EMSDK_DIR', '$ABS_SRC/deps/emsdk')
  n.variable('EMCC', '$EMSDK_DIR/emscripten/emcc')
  n.newline()
  n.rule('gen_raw_bindings',
    '$SRC/tools/gen_raw_bindings $in $out',
    description='GEN RAW BINDINGS',
  )
  n.rule('copy', 'cp -rf $in $out', description='COPY')
  n.rule('bundle', 'px --external-core $in -o $out', description='BUNDLE')
  emconfig = ';'.join([
    "LLVM_ROOT='$EMSDK_DIR/llvm'",
    "EMSCRIPTEN_ROOT='$EMSDK_DIR/emscripten'",
    "BINARYEN_ROOT='$EMSDK_DIR/llvm/binaryen'",
    "EMSCRIPTEN_NATIVE_OPTIMIZER='$EMSDK_DIR/llvm/optimizer'",
    "NODE_JS='$ABS_SRC/deps/node/bin/node'",
    "COMPILER_ENGINE=NODE_JS",
    "JS_ENGINES=[NODE_JS]",
  ])

  sqlite_methods = [
    'sqlite3_open',
    'sqlite3_close',
    'sqlite3_prepare_v2',
    'sqlite3_bind_blob',
    'sqlite3_aggregate_context',
    'sqlite3_auto_extension',
    'sqlite3_backup_finish',
    'sqlite3_backup_init',
    'sqlite3_backup_pagecount',
    'sqlite3_backup_remaining',
    'sqlite3_backup_step',
    'sqlite3_bind_blob',
    'sqlite3_bind_blob64',
    'sqlite3_bind_double',
    'sqlite3_bind_int',
    'sqlite3_bind_int64',
    'sqlite3_bind_null',
    'sqlite3_bind_parameter_count',
    'sqlite3_bind_parameter_index',
    'sqlite3_bind_parameter_name',
    'sqlite3_bind_pointer',
    'sqlite3_bind_text',
    'sqlite3_bind_text16',
    'sqlite3_bind_text64',
    'sqlite3_bind_value',
    'sqlite3_bind_zeroblob',
    'sqlite3_bind_zeroblob64',
    'sqlite3_blob_bytes',
    'sqlite3_blob_close',
    'sqlite3_blob_open',
    'sqlite3_blob_read',
    'sqlite3_blob_reopen',
    'sqlite3_blob_write',
    'sqlite3_busy_handler',
    'sqlite3_busy_timeout',
    'sqlite3_cancel_auto_extension',
    'sqlite3_changes',
    'sqlite3_clear_bindings',
    'sqlite3_close',
    'sqlite3_close_v2',
    'sqlite3_collation_needed',
    'sqlite3_collation_needed16',
    'sqlite3_column_blob',
    'sqlite3_column_bytes',
    'sqlite3_column_bytes16',
    'sqlite3_column_count',
    # 'sqlite3_column_database_name',
    # 'sqlite3_column_database_name16',
    'sqlite3_column_decltype',
    'sqlite3_column_decltype16',
    'sqlite3_column_double',
    'sqlite3_column_int',
    'sqlite3_column_int64',
    'sqlite3_column_name',
    'sqlite3_column_name16',
    # 'sqlite3_column_origin_name',
    # 'sqlite3_column_origin_name16',
    # 'sqlite3_column_table_name',
    # 'sqlite3_column_table_name16',
    'sqlite3_column_text',
    'sqlite3_column_text16',
    'sqlite3_column_type',
    'sqlite3_column_value',
    'sqlite3_commit_hook',
    'sqlite3_compileoption_get',
    'sqlite3_compileoption_used',
    'sqlite3_complete',
    'sqlite3_complete16',
    'sqlite3_config',
    'sqlite3_context_db_handle',
    'sqlite3_create_collation',
    'sqlite3_create_collation16',
    'sqlite3_create_collation_v2',
    'sqlite3_create_function',
    'sqlite3_create_function16',
    'sqlite3_create_function_v2',
    'sqlite3_create_module',
    'sqlite3_create_module_v2',
    'sqlite3_create_window_function',
    'sqlite3_data_count',
    'sqlite3_db_cacheflush',
    'sqlite3_db_config',
    'sqlite3_db_filename',
    'sqlite3_db_handle',
    'sqlite3_db_mutex',
    'sqlite3_db_readonly',
    'sqlite3_db_release_memory',
    'sqlite3_db_status',
    'sqlite3_declare_vtab',
    # 'sqlite3_deserialize',
    'sqlite3_enable_load_extension',
    'sqlite3_enable_shared_cache',
    'sqlite3_errcode',
    'sqlite3_errmsg',
    'sqlite3_errmsg16',
    'sqlite3_errstr',
    'sqlite3_exec',
    'sqlite3_expanded_sql',
    'sqlite3_extended_errcode',
    'sqlite3_extended_result_codes',
    'sqlite3_file_control',
    'sqlite3_finalize',
    'sqlite3_free',
    'sqlite3_free_table',
    'sqlite3_get_autocommit',
    'sqlite3_get_auxdata',
    'sqlite3_get_table',
    'sqlite3_initialize',
    'sqlite3_interrupt',
    'sqlite3_keyword_check',
    'sqlite3_keyword_count',
    'sqlite3_keyword_name',
    'sqlite3_last_insert_rowid',
    'sqlite3_libversion',
    'sqlite3_libversion_number',
    'sqlite3_limit',
    'sqlite3_load_extension',
    'sqlite3_log',
    'sqlite3_malloc',
    'sqlite3_malloc64',
    'sqlite3_memory_highwater',
    'sqlite3_memory_used',
    'sqlite3_mprintf',
    'sqlite3_msize',
    'sqlite3_mutex_alloc',
    'sqlite3_mutex_enter',
    'sqlite3_mutex_free',
    # 'sqlite3_mutex_held',
    'sqlite3_mutex_leave',
    # 'sqlite3_mutex_notheld',
    'sqlite3_mutex_try',
    'sqlite3_next_stmt',
    # 'sqlite3_normalized_sql',
    'sqlite3_open',
    'sqlite3_open16',
    'sqlite3_open_v2',
    'sqlite3_os_end',
    'sqlite3_os_init',
    'sqlite3_overload_function',
    'sqlite3_prepare',
    'sqlite3_prepare16',
    'sqlite3_prepare16_v2',
    'sqlite3_prepare16_v3',
    'sqlite3_prepare_v2',
    'sqlite3_prepare_v3',
    # 'sqlite3_preupdate_count',
    # 'sqlite3_preupdate_depth',
    # 'sqlite3_preupdate_hook',
    # 'sqlite3_preupdate_new',
    # 'sqlite3_preupdate_old',
    'sqlite3_profile',
    'sqlite3_progress_handler',
    'sqlite3_randomness',
    'sqlite3_realloc',
    'sqlite3_realloc64',
    'sqlite3_release_memory',
    'sqlite3_reset',
    'sqlite3_reset_auto_extension',
    'sqlite3_result_blob',
    'sqlite3_result_blob64',
    'sqlite3_result_double',
    'sqlite3_result_error',
    'sqlite3_result_error16',
    'sqlite3_result_error_code',
    'sqlite3_result_error_nomem',
    'sqlite3_result_error_toobig',
    'sqlite3_result_int',
    'sqlite3_result_int64',
    'sqlite3_result_null',
    'sqlite3_result_pointer',
    'sqlite3_result_subtype',
    'sqlite3_result_text',
    'sqlite3_result_text16',
    'sqlite3_result_text16be',
    'sqlite3_result_text16le',
    'sqlite3_result_text64',
    'sqlite3_result_value',
    'sqlite3_result_zeroblob',
    'sqlite3_result_zeroblob64',
    'sqlite3_rollback_hook',
    # 'sqlite3_serialize',
    'sqlite3_set_authorizer',
    'sqlite3_set_auxdata',
    'sqlite3_set_last_insert_rowid',
    'sqlite3_shutdown',
    'sqlite3_sleep',
    # 'sqlite3_snapshot_cmp',
    # 'sqlite3_snapshot_free',
    # 'sqlite3_snapshot_get',
    # 'sqlite3_snapshot_open',
    # 'sqlite3_snapshot_recover',
    'sqlite3_snprintf',
    'sqlite3_soft_heap_limit64',
    'sqlite3_sourceid',
    'sqlite3_sql',
    'sqlite3_status',
    'sqlite3_status64',
    'sqlite3_step',
    'sqlite3_stmt_busy',
    # 'sqlite3_stmt_isexplain',
    'sqlite3_stmt_readonly',
    # 'sqlite3_stmt_scanstatus',
    # 'sqlite3_stmt_scanstatus_reset',
    'sqlite3_stmt_status',
    'sqlite3_str_append',
    'sqlite3_str_appendall',
    'sqlite3_str_appendchar',
    'sqlite3_str_appendf',
    'sqlite3_str_errcode',
    'sqlite3_str_finish',
    'sqlite3_str_length',
    'sqlite3_str_new',
    'sqlite3_str_reset',
    'sqlite3_str_value',
    'sqlite3_str_vappendf',
    'sqlite3_strglob',
    'sqlite3_stricmp',
    'sqlite3_strlike',
    'sqlite3_strnicmp',
    'sqlite3_system_errno',
    'sqlite3_table_column_metadata',
    'sqlite3_test_control',
    'sqlite3_threadsafe',
    'sqlite3_total_changes',
    'sqlite3_trace',
    'sqlite3_trace_v2',
    # 'sqlite3_unlock_notify',
    'sqlite3_update_hook',
    'sqlite3_uri_boolean',
    'sqlite3_uri_int64',
    'sqlite3_uri_parameter',
    'sqlite3_user_data',
    'sqlite3_value_blob',
    'sqlite3_value_bytes',
    'sqlite3_value_bytes16',
    'sqlite3_value_double',
    'sqlite3_value_dup',
    'sqlite3_value_free',
    # 'sqlite3_value_frombind',
    'sqlite3_value_int',
    'sqlite3_value_int64',
    'sqlite3_value_nochange',
    'sqlite3_value_numeric_type',
    'sqlite3_value_pointer',
    'sqlite3_value_subtype',
    'sqlite3_value_text',
    'sqlite3_value_text16',
    'sqlite3_value_text16be',
    'sqlite3_value_text16le',
    'sqlite3_value_type',
    # 'sqlite3_version',
    'sqlite3_vfs_find',
    'sqlite3_vfs_register',
    'sqlite3_vfs_unregister',
    'sqlite3_vmprintf',
    'sqlite3_vsnprintf',
    'sqlite3_vtab_collation',
    'sqlite3_vtab_config',
    'sqlite3_vtab_nochange',
    'sqlite3_vtab_on_conflict',
    'sqlite3_wal_autocheckpoint',
    'sqlite3_wal_checkpoint',
    'sqlite3_wal_checkpoint_v2',
    'sqlite3_wal_hook',
  ]

  options = ' '.join([
    '-g4',
    "-Wall",
    "-Os",
    "-isystem $SRC/deps/sqlite",
    "-s EXPORTED_FUNCTIONS=[{}]".format(','.join("'_{}'".format(s) for s in sqlite_methods)),
    "-s EXTRA_EXPORTED_RUNTIME_METHODS=['cwrap','ccall','FS','ALLOC_STACK','allocate']",
    "-s WASM=1",
    "-s MODULARIZE=1",
    "-s ALLOW_MEMORY_GROWTH=1",
    "-s EXPORT_NAME=CrunchModule",
  ])
  n.rule('emcc', '$EMCC --em-config "{}" $in {} -o $out'.format(emconfig, options),
      description='EMCC'
  )
  n.newline()

  n.build('$OUT/crunch.js', 'emcc', [
      '$SRC/src/crunch.cc',
      '$SRC/deps/sqlite/sqlite3.c',
    ], implicit=[], implicit_outputs=[
      '$OUT/crunch.wasm',
    ])
  n.build('$OUT/crunch-worker.mjs', 'copy', ['$SRC/src/crunch-worker.mjs'])
  n.build('$OUT/crunch-api.mjs', 'copy', ['$SRC/src/crunch-api.mjs'])
  n.build('$OUT/index.mjs', 'copy', ['$SRC/src/index.mjs'])
  n.build('$OUT/sqlite_codes.mjs', 'copy', ['$SRC/src/sqlite_codes.mjs'])
  n.build('$OUT/node_modules/ospec/ospec.mjs', 'copy', ['$SRC/deps/mithril/ospec/ospec.mjs'])
  n.build('$OUT/node_modules/ospec/ospec.js', 'copy', ['$SRC/deps/mithril/ospec/ospec.js'])
  n.build('$OUT/node_modules/ospec/package.json', 'copy', ['$SRC/deps/mithril/ospec/package.json'])
  n.build('$OUT/end_to_end_systemtest.mjs', 'copy', ['$SRC/src/end_to_end_systemtest.mjs'])
  n.build('$OUT/sqlite_raw_bindings_systemtest.mjs', 'copy', ['$SRC/src/sqlite_raw_bindings_systemtest.mjs'])
  n.build('$OUT/run_systemtests.mjs', 'copy', ['$SRC/src/run_systemtests.mjs'])
  n.build('$OUT/browser_entry_point.mjs', 'copy', ['$SRC/src/browser_entry_point.mjs'])
  n.build('$OUT/package.json', 'copy', ['$SRC/src/package.json'])
  n.build('$OUT/raw.mjs', 'gen_raw_bindings', ['$SRC/deps/sqlite/sqlite3.h'], implicit=[
    '$SRC/tools/gen_raw_bindings',
  ])
  n.build('$OUT/crunch.bundle.js', 'bundle', ['$OUT/browser_entry_point.mjs'], implicit=[
    '$OUT/index.mjs',
    '$OUT/sqlite_codes.mjs',
    '$OUT/crunch.js',
  ])

  n.build('$OUT/site/tachyons.min.css', 'copy', ['$SRC/deps/tachyons/css/tachyons.min.css'])
  n.build('$OUT/site/mithril.min.js', 'copy', ['$SRC/deps/mithril/mithril.min.js'])
  n.build('$OUT/site/crunch.wasm', 'copy', ['$OUT/crunch.wasm'])
  n.build('$OUT/site/crunch.bundle.js', 'copy', ['$OUT/crunch.bundle.js'])
  n.build('$OUT/site/index.html', 'copy', ['$SRC/src/crunch.html'])


if __name__ == '__main__':
  exit(main())

